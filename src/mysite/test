# this time for active learning, per prompt - if data points are all from one class, select another set of 10 data pts randomly
def svm_active(x_train, x_test, y_train, y_test, rand):
    x_train.reset_index(drop=True,inplace=True)
    y_train.reset_index(drop=True,inplace=True)

    #list of params for GridSearchCV
    c_seqs = np.logspace(-3,6,num=10) #chose log increments as suggested, examining large and small values just like i did in previous hw
    param_grid = {'C':c_seqs}
    
    test_err_list = []
    num_train_pts = x_train.shape[0]
    train_indices = list(range(num_train_pts)) 
    
    np.random.seed(rand)

    pool_indices = []
    best_pool_indices = []

    counter = 0
    while counter < 90: #only do until 90 SVMs
        np.random.shuffle(train_indices)
        svm_train_indices = [train_indices[i] for i in range(10)] # pick out 10 randomly selected at a time with indices
        
        y_train_val_check = y_train.iloc[svm_train_indices]
        if len(y_train_val_check.unique())!=1:
            for idx in svm_train_indices:
                train_indices.remove(idx) #if they are not all from 1 class, then can remove them from the "dataset"
            
            pool_indices.extend(svm_train_indices)
            y_train_vals = y_train.iloc[pool_indices]
            x_train_vals = x_train.iloc[pool_indices,:]

            if counter >= 1:
                best_x_train_vals = x_train.iloc[best_pool_indices,:]
                best_y_train_vals = y_train.iloc[best_pool_indices]

                best_svm_clsfr.fit(best_x_train_vals,best_y_train_vals)

            if counter == 0:
                svm_clsfr = LinearSVC(penalty='l1', dual=False, random_state= rand, max_iter = 3000)
                grid_srch_svm= GridSearchCV(svm_clsfr, param_grid, n_jobs=-1,scoring='accuracy', cv = 5)   
                grid_srch_svm.fit(x_train_vals,y_train_vals)

                best_svm = grid_srch_svm.best_estimator_
                best_svm_params = grid_srch_svm.best_params_
                best_svm_c = best_svm_params['C']

                best_svm_clsfr = LinearSVC(penalty='l1', dual=False, C=best_svm_c,random_state= rand, max_iter = 3000)
                best_svm_clsfr.fit(x_train_vals,y_train_vals)

            check_dist = best_svm_clsfr.decision_function(x_train_vals)
            dist_arry = np.abs(check_dist)
            closest_10_idx = list(np.argsort(dist_arry)[:10])
            #print(closest_10_idx)
            best_pool_indices.extend(closest_10_idx)

            y_pred_test = best_svm_clsfr.predict(x_test)
            test_acc_scr = accuracy_score(y_test, y_pred_test)
            test_err = 1 - test_acc_scr
            test_err_list.append(test_err)

            counter += 1
    
    return test_err_list
